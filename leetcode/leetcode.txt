1.Two Sum
package main

import "fmt"

func twoSum(nums []int, target int) []int {
	for i := 0; i < len(nums); i++ {
		var start = nums[i]
		for j := i + 1; j < len(nums); j++ {
			var end = nums[j]
			if (start + end) == target {
				return []int{i, j}
			}
		}
	}
	return []int{}
}

func main() {
	nums := []int{2, 7, 11, 15}
	target := 9
	fmt.Println("Index nos : ", twoSum(nums, target))
}



2.Palindrome no 
package main

import "fmt"

func isPalindrome(x int) bool {
	value := 0
	num := x
	for x > 0 {
		remainder := x % 10
		value *= 10
		value += remainder
		x /= 10
	}
	if value == num {
		return true
	}
	return false
}

func main() {
	fmt.Println("Number is palindrome : ", isPalindrome(121))
}

// Remainder :  1
// value :  0
// value2 :  1
// x :  121
// x 2 :  12
// Remainder :  2
// value :  10
// value2 :  12
// x :  12
// x 2 :  1
// Remainder :  1
// value :  120
// value2 :  121
// x :  1
// x 2 :  0
// Number is palindrome :  true



3.Roman to integer 
package main

import "fmt"

var RomanNumerals = map[string]int{
	"I": 1,
	"V": 5,
	"X": 10,
	"L": 50,
	"C": 100,
	"D": 500,
	"M": 1000,
}

func romanToInt(s string) int {
	sum := 0
	greatest := 0
	for i := len(s) - 1; i >= 0; i-- {
		letter := s[i]
		num := RomanNumerals[string(letter)]
		if num >= greatest {
			greatest = num
			sum = sum + num
			continue
		}
		sum = sum - num
	}
	return sum
}

func main() {
	fmt.Println(romanToInt("IV"))
}


4.length of last World
package main

import (
	"fmt"
	"strings"
)

func lengthOfLastWord(s string) int {
	s = strings.TrimSpace(s)
	result := strings.Split(s, " ")
	return len(result[len(result)-1])
}

func main() {
	fmt.Println(lengthOfLastWord("         Hello World            "))
}


5.single no
package main

import "fmt"

func singleNumber(nums []int) int {
	count_store := make(map[int]int)
	for _, key := range nums {
		count_store[key]++
	}
	res := 0
	for _, key := range nums {
		if count_store[key] == 1 {
			res += key
		}
	}
	return res
}

func main() {
	array := []int{2, 2, 2, 1}
	fmt.Println(singleNumber(array))
}



6.remove elements
package main

import "fmt"

func removeElement(nums []int, val int) int {
	replace_index := 0
	for i := 0; i < len(nums); i++ {
		if nums[i] != val {
			nums[replace_index] = nums[i]
			replace_index += 1
		}
	}
	return replace_index
}

//[3,2,2,3]
//[2,]

func main() {
	a := []int{0, 1, 2, 2, 3, 0, 4, 2}
	b := 2
	fmt.Println(removeElement(a, b))
}


7.Plus one
package main

import "fmt"

func plusOne(digits []int) []int {
	for i := len(digits) - 1; i >= 0; i-- {
		if digits[i]+1 == 10 {
			digits[i] = 0
		} else {
			digits[i]++
			return digits
		}
	}
	digits = append([]int{1}, digits...)
	return digits
}

func main() {
	a := []int{1, 2, 9}
	fmt.Println(plusOne(a))
}



8.remove duplicates from sorted array
package main

import "fmt"

func removeDuplicates(nums []int) int {
	res := 0
	for i := 1; i < len(nums); i++ {
		if nums[res] != nums[i] {
			res++
			nums[res] = nums[i]
		}
	}
	return res + 1
}

func main() {
	nums := []int{-3, -1, 0, 0, 0, 3, 3}
	fmt.Println(removeDuplicates(nums))
}


9.longest common prefix
package main

import (
	"fmt"
)

func longestCommonPrefix(strs []string) string {
	for index, val := range strs[0] {
		for _, j := range strs[1:] {
			if index == len(j) || byte(val) != j[index] {
				return strs[0][:index]
			}
		}
	}
	return strs[0]
}

func main() {
	a := []string{"flower", "flow", "flight"}
	fmt.Println(longestCommonPrefix(a))
}


10.reverse string
package main

import "fmt"

func reverseString(s []byte) []byte {
	i, j := 0, len(s)-1
	for i < j {
		temp := s[i]
		s[i] = s[j]
		s[j] = temp
		i++
		j--
	}
	return s
}

func main() {
	// str := "hello"
	// a := []byte{}
	// copy(a, str)
	//or
	str := "hello"
	a := make([]byte, len(str))
	copy(a, str)
	fmt.Println(reverseString(a))
}

11.longest commom prefix
package main

import (
	"fmt"
)

func longestCommonPrefix(strs []string) string {
	for index, val := range strs[0] {
		for _, j := range strs[1:] {
			if index == len(j) || byte(val) != j[index] {
				return strs[0][:index]
			}
		}
	}
	return strs[0]
}

func main() {
	a := []string{"flower", "flow", "flight"}
	fmt.Println(longestCommonPrefix(a))
}


12.merged sorted array
package main

import "fmt"

func merge(nums1 []int, m int, nums2 []int, n int) []int {
	m--
	n--

	for i := m + n + 1; i >= 0 && n >= 0; i-- {
		if m < 0 || nums1[m] < nums2[n] {
			nums1[i] = nums2[n]
			n--
		} else {
			nums1[i] = nums1[m]
			m--
		}
	}
	return nums1
}

func main() {
	a := []int{1, 2, 3, 0, 0, 0}
	b := 3
	c := []int{2, 5, 6}
	d := 3
	fmt.Println(merge(a, b, c, d))
}


13.power of two
package main

import "fmt"

func isPowerOfTwo(n int) bool {
	if n == 1 {
		return true
	} else if n < 1 {
		return false
	}
	for n > 1 {
		if n%2 == 1 {
			return false
		}
		n = n / 2
	}
	return true
}

func main() {
	n := 42
	fmt.Println(isPowerOfTwo(n))
}



14.power of three
package main

import "fmt"

func isPowerOfThree(n int) bool {
	if n < 1 {
		return false
	}
	for n > 1 {
		if n%3 == 1 || n%3 == 2 {
			return false
		}
		n = n / 3
	}
	return true
}

func main() {
	n := 27
	fmt.Println(isPowerOfThree(n))
}


15.power of four
package main

import "fmt"

func isPowerOfFour(n int) bool {
	if n < 1 {
		return false
	}
	for n > 1 {
		if n%4 == 1 || n%4 == 2 || n%4 == 3 {
			return false
		}
		n = n / 4
	}
	return true
}

func main() {
	n := 16
	fmt.Println(isPowerOfFour(n))
}


16.fibonacci Number 
package main

import "fmt"

func fib(n int) int {
	if n <= 0 {
		return 0
	} else if n == 1 || n == 2 {
		return 1
	} else {
		return (fib(n-1) + fib(n-2))
	}

}

func main() {
	n := 25
	fmt.Println(fib(n))
}

17.fizz_Buzz
package main

import (
	"fmt"
	"strconv"
)

func fizzBuzz(n int) []string {
	res := []string{}
	for i := 1; i < n+1; i++ {
		if i%3 == 0 && i%5 == 0 {
			res = append(res, "FizzBuzz")
		} else if i%3 == 0 {
			res = append(res, "Fizz")
		} else if i%5 == 0 {
			res = append(res, "Buzz")
		} else {
			res = append(res, strconv.Itoa(i))
		}
	}
	return res
}

func main() {
	n := 15
	fmt.Println(fizzBuzz(n))
}
